#include <stdio.h>
#include <stdlib.h>

// Function to calculate the cost to convert given square to a magic square
int calculateCost(int s[3][3], int magic[3][3]) {
    int cost = 0;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cost += abs(s[i][j] - magic[i][j]);
        }
    }
    return cost;
}

int formingMagicSquare(int s[3][3]) {
    // List of all possible 3x3 magic squares
    int magicSquares[8][3][3] = {
        {{8, 1, 6}, {3, 5, 7}, {4, 9, 2}},
        {{6, 1, 8}, {7, 5, 3}, {2, 9, 4}},
        {{4, 9, 2}, {3, 5, 7}, {8, 1, 6}},
        {{2, 9, 4}, {7, 5, 3}, {6, 1, 8}},
        {{8, 3, 4}, {1, 5, 9}, {6, 7, 2}},
        {{4, 3, 8}, {9, 5, 1}, {2, 7, 6}},
        {{6, 7, 2}, {1, 5, 9}, {8, 3, 4}},
        {{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}
    };

    int minCost = __INT_MAX__;  // Initialize minCost with a large value

    // Calculate the minimal cost to convert the given square to any magic square
    for (int i = 0; i < 8; i++) {
        int currentCost = calculateCost(s, magicSquares[i]);
        if (currentCost < minCost) {
            minCost = currentCost;
        }
    }

    return minCost;
}

int main() {
    int s[3][3];
    
    // Read input
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            scanf("%d", &s[i][j]);
        }
    }
    
    // Calculate and print the minimum cost to convert the matrix to a magic square
    int result = formingMagicSquare(s);
    printf("%d\n", result);
    
    return 0;
}
