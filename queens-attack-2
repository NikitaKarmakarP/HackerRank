#include <stdio.h>

int min(int a, int b) {
    return a < b ? a : b;
}

int queensAttack(int n, int k, int r_q, int c_q, int obstacles[][2]) {
    // Initialize direction limits based on board edges
    int up = n - r_q;
    int down = r_q - 1;
    int right = n - c_q;
    int left = c_q - 1;
    int up_right = min(up, right);
    int up_left = min(up, left);
    int down_right = min(down, right);
    int down_left = min(down, left);

    // Process each obstacle
    for (int i = 0; i < k; i++) {
        int r_o = obstacles[i][0];
        int c_o = obstacles[i][1];

        // Determine direction and adjust limits
        if (c_o == c_q) {  // Same column
            if (r_o > r_q) up = min(up, r_o - r_q - 1);         // Up direction
            else down = min(down, r_q - r_o - 1);               // Down direction
        } else if (r_o == r_q) {  // Same row
            if (c_o > c_q) right = min(right, c_o - c_q - 1);   // Right direction
            else left = min(left, c_q - c_o - 1);               // Left direction
        } else if (abs(r_o - r_q) == abs(c_o - c_q)) {  // Diagonal
            if (r_o > r_q && c_o > c_q) up_right = min(up_right, r_o - r_q - 1);  // Up-Right
            else if (r_o > r_q && c_o < c_q) up_left = min(up_left, r_o - r_q - 1); // Up-Left
            else if (r_o < r_q && c_o > c_q) down_right = min(down_right, r_q - r_o - 1); // Down-Right
            else if (r_o < r_q && c_o < c_q) down_left = min(down_left, r_q - r_o - 1); // Down-Left
        }
    }

    // Sum up all reachable squares
    return up + down + left + right + up_right + up_left + down_right + down_left;
}

int main() {
    int n, k;
    scanf("%d %d", &n, &k);
    int r_q, c_q;
    scanf("%d %d", &r_q, &c_q);

    int obstacles[k][2];
    for (int i = 0; i < k; i++) {
        scanf("%d %d", &obstacles[i][0], &obstacles[i][1]);
    }

    printf("%d\n", queensAttack(n, k, r_q, c_q, obstacles));
    return 0;
}
