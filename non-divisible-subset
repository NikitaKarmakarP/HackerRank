#include <stdio.h>

int nonDivisibleSubset(int S[], int n, int k) {
    int remainderCount[k]; // Array to store count of each remainder
    for (int i = 0; i < k; i++) {
        remainderCount[i] = 0; // Initialize remainder counts
    }

    // Count occurrences of each remainder
    for (int i = 0; i < n; i++) {
        int remainder = S[i] % k;
        remainderCount[remainder]++;
    }

    // Start calculating the size of the maximal subset
    int maxSubsetSize = 0;

    // We can take at most one element with a remainder of 0
    if (remainderCount[0] > 0) {
        maxSubsetSize++;
    }

    // Iterate through possible remainders
    for (int i = 1; i <= k / 2; i++) {
        if (i != k - i) {
            // Choose the maximum count between remainder i and k-i
            maxSubsetSize += (remainderCount[i] > remainderCount[k - i]) ? remainderCount[i] : remainderCount[k - i];
        } else {
            // When k is even, we can take at most one element with remainder k/2
            maxSubsetSize++;
        }
    }

    return maxSubsetSize;
}

int main() {
    int n, k;
    // Read the number of elements and the divisor
    scanf("%d %d", &n, &k);
    
    int S[n]; // Array to hold the set of integers
    // Read the elements of the set
    for (int i = 0; i < n; i++) {
        scanf("%d", &S[i]);
    }

    // Get the size of the maximal subset
    int result = nonDivisibleSubset(S, n, k);
    printf("%d\n", result); // Print the result

    return 0;
}
