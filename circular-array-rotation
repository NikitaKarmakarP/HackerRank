#include <stdio.h>
#include <stdlib.h>

int* circularArrayRotation(int* a, int n, int k, int* queries, int q, int* result) {
    k = k % n;  // Reduce k to effective rotations
    
    for (int i = 0; i < q; i++) {
        int queryIndex = queries[i];
        // Calculate the original index for the queried position after k rotations
        int originalIndex = (queryIndex - k + n) % n;
        result[i] = a[originalIndex];
    }
    
    return result;
}

int main() {
    int n, k, q;
    
    // Read array size (n), rotation count (k), and number of queries (q)
    scanf("%d %d %d", &n, &k, &q);
    
    int* a = (int*)malloc(n * sizeof(int));
    int* queries = (int*)malloc(q * sizeof(int));
    int* result = (int*)malloc(q * sizeof(int));
    
    // Read array elements
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    
    // Read query indices
    for (int i = 0; i < q; i++) {
        scanf("%d", &queries[i]);
    }
    
    // Perform the circular array rotation and get the results
    circularArrayRotation(a, n, k, queries, q, result);
    
    // Output the results for each query
    for (int i = 0; i < q; i++) {
        printf("%d\n", result[i]);
    }
    
    // Free allocated memory
    free(a);
    free(queries);
    free(result);
    
    return 0;
}
